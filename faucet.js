let chainParameters={};chainParameters[100]={chainId:'0x64',chainName:'Gnosis Chain',blockExplorerUrls:['https://blockscout.com/xdai/mainnet'],rpcUrls:['https://rpc.gnosischain.com'],iconUrls:['https://assets.coingecko.com/asset_platforms/images/11062/large/Aatar_green_white.png'],nativeCurrency:{name:'xDai',symbol:'xDAI',decimals:18},infoUrl:'https://www.gnosischain.com/evm',discordUrl:'https://discord.gg/gnosischain'};chainParameters[200]={chainId:'0xc8',chainName:'Arbitrum on Gnosis Chain',blockExplorerUrls:['https://blockscout.com/xdai/optimism'],rpcUrls:['https://optimism.gnosischain.com'],iconUrls:['https://assets.coingecko.com/asset_platforms/images/11062/large/Aatar_green_white.png'],nativeCurrency:{name:'xDai',symbol:'xDAI',decimals:18},infoUrl:'https://www.xdaichain.com/for-developers/developer-resources/aox-arbitrum-on-xdai',discordUrl:'https://discord.gg/gnosischain'};chainParameters[300]={chainId:'0x12c',chainName:'Optimism on Gnosis Chain',blockExplorerUrls:['https://blockscout.com/xdai/aox'],rpcUrls:['https://arbitrum.xdaichain.com'],iconUrls:['https://assets.coingecko.com/asset_platforms/images/11062/large/Aatar_green_white.png'],nativeCurrency:{name:'xDai',symbol:'xDAI',decimals:18},infoUrl:'https://www.xdaichain.com/for-developers/optimism-optimistic-rollups-on-gc',discordUrl:'https://discord.gg/gnosischain'};chainParameters[137]={chainId:'0x89',chainName:'Matic Network',blockExplorerUrls:['https://polygonscan.com'],rpcUrls:['https://rpc-mainnet.matic.network'],iconUrls:['https://assets.coingecko.com/coins/images/4713/large/matic-token-icon.png'],nativeCurrency:{name:'MATIC',symbol:'MATIC',decimals:18},infoUrl:"https://polygon.technology",discordUrl:'https://discord.gg/polygon'};let chainInfoContents={};function urlClean(url){const cleanUrl=url.toString().match(/^www\.(.*)/);if(Array.isArray(cleanUrl)&&cleanUrl.length>0){return cleanUrl[1];}
return url}
for(let key in chainParameters){const chain=chainParameters[key];chainInfoContents[key]="";const infoUrl=chain.infoUrl;if(typeof infoUrl=="string"){const url=new URL(infoUrl);chainInfoContents[key]+="Website: <a href='"+url.href+"' target='_blank'>"+urlClean(url.hostname)+"</a><br>";}
const explorers=chain.blockExplorerUrls;if(typeof explorers!=="undefined"&&explorers.length>0){const url=new URL(explorers[0]);chainInfoContents[key]+="Explorer: <a href='"+url.href+"' target='_blank'>"+urlClean(url.hostname)+"</a><br>";}
const discord=chain.discordUrl;if(typeof discord=="string"){chainInfoContents[key]+="Discord: <a href='"+discord+"' target='_blank'>discord.com</a>";}}
let chainImportantContents={100:"Set gas price to 2 gwei when making a transaction.",200:"Make another faucet request only if needed.",300:"Make another faucet request only if needed.",137:"Only one faucet drop per person!"};let selectedChainId=0;function selectChainId(_chainId){const selectNetworkPar=document.getElementById('SelectNetworkPar');const faucetRequestDiv=document.getElementById('faucetRequestDiv');const chainInfoDiv=document.getElementById('chainInfoDiv');const chainInfoPar=document.getElementById('chainInfoPar');const chainImportantPar=document.getElementById('chainImportantPar');const chainSelectorDiv=document.getElementById('chainSelectorDiv');_chainId=parseInt(_chainId);selectedChainId=_chainId;let chainName=chainParameters[_chainId]["chainName"];faucetRequestDiv.style.pointerEvents='auto';faucetRequestDiv.style.opacity='inherit';chainInfoDiv.style.pointerEvents='auto';chainInfoDiv.style.opacity='inherit';chainInfoDiv.style.visibility='inherit';chainSelectorDiv.classList.remove('border-warning');chainSelectorDiv.classList.add('border-success');selectNetworkPar.innerHTML='Selected chain/network:<br>'+chainName+'';bgCreate(_chainId);const requestDropBtn=document.getElementById('requestDropBtn');requestDropBtn.innerHTML='Request drop - '+chainName+'';chainInfoPar.innerHTML="";chainImportantPar.innerHTML="";if(chainInfoContents[_chainId]){chainInfoPar.innerHTML=chainInfoContents[_chainId];}
if(chainImportantContents[_chainId]){chainImportantPar.innerHTML="-- Important! --&nbsp; "+chainImportantContents[_chainId];}}
window.addEventListener('load',function(){const ethChars="0x123456789abcdefABCDEF";const input=document.getElementById('faucetRequestAddress');input.addEventListener('keypress',e=>{if(ethChars.indexOf(e.key)<0){e.preventDefault();return false;}else if(input.value.includes("x")){if(e.key==="x"){e.preventDefault();return false;}}
if(input.value.length>=999999){e.preventDefault();return false;}
return true;});const eventList=['propertychange','change','click','input','paste'];for(let eventNum=0;eventNum<eventList.length;eventNum++){input.addEventListener(eventList[eventNum],e=>{let input=document.getElementById('faucetRequestAddress');let inputValue='';for(let i=0;i<input.value.length;i++){if(ethChars.indexOf(input.value[i])>=0){inputValue+=''+input.value[i];}}
input.value=inputValue;});}
const captchaChars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";const captchaInput=document.getElementById('captchaSolution');captchaInput.addEventListener('keypress',e=>{if(captchaChars.indexOf(e.key)<0){e.preventDefault();return false;}
if(captchaInput.value.length>=20){e.preventDefault();return false;}
return true;});if(typeof presetChain!=='undefined'){setTimeout(function(){selectChainId(parseInt(presetChain))},20)
setTimeout(function(){requestDrop()},120)}});const blobPrx='data:image/png;base64,';function requestDrop(){if(document.getElementById('faucetRequestAddress').value.length!==42){return;}
const captchaW=document.getElementById('captchaWrapper');captchaW.classList.remove('d-none');let opts={method:'GET',headers:{}};fetch('/captcha',opts).then(function(response){return response.json();}).then(function(x){document.getElementById('captchaId').innerHTML=x['id'];document.getElementById('captchaImg').src=blobPrx+x['img'];});}
function requestWithCaptcha(){let postParams={};postParams['chainId']=selectedChainId;postParams['address']=document.getElementById('faucetRequestAddress').value;postParams['solution']=document.getElementById('captchaSolution').value;postParams['id']=document.getElementById('captchaId').innerHTML;postParams['h-captcha-response']=document.querySelector('[name="h-captcha-response"]').value;const captchaW=document.getElementById('captchaWrapper');captchaW.classList.add('d-none');document.getElementById('faucetRequestDiv').remove();document.getElementById('chainSelectorDiv').remove();document.getElementById('oneDiv').remove();document.getElementById('faucetRequestDivRepl').classList.remove('d-none');const retryForm=document.getElementById('retryFaucetForm');retryForm.querySelector('[name="chainId"]').value=postParams['chainId']
retryForm.querySelector('[name="address"]').value=postParams['address']
let opts={method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(postParams)};fetch('https://gnosischain.herokuapp.com/faucet/request',opts).then(function(response){return response;}).then(function(x){return;});}
function dec2hex(str,weiDecimals=18){str=str.toString()
if(!(str.match(/^\d+\.?\d{0,18}$/))){return;}
if(!(str.includes('.'))){str=str+'.0';}
if(str.split('.')[1].length>weiDecimals){str=str.split('.')[0]+'.'+str.split('.')[1].substring(0,weiDecimals);}
while(str.split('.')[1].length<weiDecimals){str=str+'0';}
str=str.split('.')[0]+str.split('.')[1];return BigInt(str).toString('16');}
async function addNetwork(){if(typeof window.ethereum=='undefined'){return;}
const chainParameters={chainId:'0x64',chainName:'xDai Chain',blockExplorerUrls:['https://blockscout.com/xdai/mainnet'],rpcUrls:['https://rpc.xdaichain.com'],iconUrls:['https://gblobscdn.gitbook.com/spaces%2F-Lpi9AHj62wscNlQjI-l%2Favatar.png'],nativeCurrency:{name:'xDai',symbol:'xDAI',decimals:18}};let chainError=await ethereum.request({method:'wallet_addEthereumChain',params:[chainParameters],});}
function requestFaucet(){document.getElementById('btn3').remove();var xhr=new XMLHttpRequest();xhr.open("POST",'faucet/request',true);xhr.setRequestHeader('Content-Type','application/json');xhr.send(JSON.stringify({address:accounts[0],token:faucetToken()}));}
async function depositFaucet(depositEth=0.02){const transactionParameters={nonce:'0x00',gasPrice:'0x3b9aca00',gas:'0x186a0',to:'0x00000000092769687EeB04fdC990C363EDdeFec2',from:accounts[0],value:'0x'+dec2hex(depositEth),data:'0x',chainId:'0x64',};const txHash=await ethereum.request({method:'eth_sendTransaction',params:[transactionParameters],});}
